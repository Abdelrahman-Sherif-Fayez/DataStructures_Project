# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
from phase2_posts import get_post
from phase2 import *
from network import network
from phase2 import getlist, users_dictionary
from validation import *
from bitarray import bitarray
from compression import HuffmanDecoding, HuffmanEncoding
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtGui import *
from PrettifyWIP import Prettifyfunction, clearSpacing
from Minify import Minify
from Completion_of_JSON import Json
from PyQt5.QtWidgets import *


class Ui_MainWindow(QWidget):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(861, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        self.CompressBtn = QtWidgets.QPushButton(self.centralwidget)
        self.CompressBtn.setGeometry(QtCore.QRect(10, 130, 75, 23))
        self.CompressBtn.setObjectName("pushButton")
        self.CompressBtn.clicked.connect(self.HuffmanEnc)

        self.DecompressBtn = QtWidgets.QPushButton(self.centralwidget)
        self.DecompressBtn.setGeometry(QtCore.QRect(10, 170, 75, 23))
        self.DecompressBtn.setObjectName("pushButton_2")
        self.DecompressBtn.clicked.connect(self.HuffmanDec)

        self.RestoreBtn = QtWidgets.QPushButton(self.centralwidget)
        self.RestoreBtn.setGeometry(QtCore.QRect(10, 50, 75, 23))
        self.RestoreBtn.setObjectName("pushButton_3")
        self.RestoreBtn.clicked.connect(self.Restore)

        self.MinifyBtn = QtWidgets.QPushButton(self.centralwidget)
        self.MinifyBtn.setGeometry(QtCore.QRect(10, 210, 75, 23))
        self.MinifyBtn.setObjectName("pushButton_4")
        self.MinifyBtn.clicked.connect(self.MinifyXML)

        self.PrettifyBtn = QtWidgets.QPushButton(self.centralwidget)
        self.PrettifyBtn.setGeometry(QtCore.QRect(10, 250, 75, 23))
        self.PrettifyBtn.setObjectName("pushButton_5")
        self.PrettifyBtn.clicked.connect(self.PrettifyXML)

        self.JSONBtn = QtWidgets.QPushButton(self.centralwidget)
        self.JSONBtn.setGeometry(QtCore.QRect(10, 290, 75, 23))
        self.JSONBtn.setObjectName("pushButton_6")
        self.JSONBtn.clicked.connect(self.toJson)

        self.ValidateBtn = QtWidgets.QPushButton(self.centralwidget)
        self.ValidateBtn.setGeometry(QtCore.QRect(10, 90, 75, 23))
        self.ValidateBtn.setObjectName("pushButton_7")
        self.ValidateBtn.clicked.connect(self.validate)

        self.BrowseBtn = QtWidgets.QPushButton(self.centralwidget)
        self.BrowseBtn.setGeometry(QtCore.QRect(10, 10, 75, 23))
        self.BrowseBtn.setObjectName("pushButton_8")
        self.BrowseBtn.clicked.connect(self.Browse)

        self.SaveBtn = QtWidgets.QPushButton(self.centralwidget)
        self.SaveBtn.setGeometry(QtCore.QRect(10, 450, 75, 23))
        self.SaveBtn.setObjectName("pushButton_9")
        self.SaveBtn.clicked.connect(self.Save)

        self.File = ""  # current filepath, starts out with nothing
        self.Path = ""
        self.FileField = QtWidgets.QLineEdit(self.centralwidget)
        self.FileField.setGeometry(QtCore.QRect(110, 10, 360, 20))
        self.FileField.setObjectName("lineEdit")

        self.MainTextField = QtWidgets.QTextEdit(self.centralwidget)
        self.MainTextField.setGeometry(QtCore.QRect(110, 50, 360, 511))
        self.MainTextField.setObjectName("textEdit")

        self.ResultField = QtWidgets.QTextEdit(self.centralwidget)
        self.ResultField.setGeometry(QtCore.QRect(480, 50, 360, 511))
        self.ResultField.setObjectName("textEdit_2")

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(640, 20, 71, 21))
        self.label.setObjectName("label")

        self.FollowersBtn = QtWidgets.QPushButton(self.centralwidget)
        self.FollowersBtn.setGeometry(QtCore.QRect(10, 330, 75, 23))
        self.FollowersBtn.setObjectName("pushButton_10")
        self.FollowersBtn.clicked.connect(self.Network)

        self.AnalysisBtn = QtWidgets.QPushButton(self.centralwidget)
        self.AnalysisBtn.setGeometry(QtCore.QRect(10, 370, 75, 23))
        self.AnalysisBtn.setObjectName("pushButton_11")
        self.AnalysisBtn.clicked.connect(self.Analysis)

        self.SearchBtn = QtWidgets.QPushButton(self.centralwidget)
        self.SearchBtn.setGeometry(QtCore.QRect(10, 410, 75, 23))
        self.SearchBtn.setObjectName("pushButton_12")
        self.SearchBtn.clicked.connect(self.postSearch)

        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):  # cannot be removed
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.CompressBtn.setText(_translate("MainWindow", "Compress"))
        self.DecompressBtn.setText(_translate("MainWindow", "Decompress"))
        self.RestoreBtn.setText(_translate("MainWindow", "Restore"))
        self.MinifyBtn.setText(_translate("MainWindow", "Minify"))
        self.PrettifyBtn.setText(_translate("MainWindow", "Prettify"))
        self.JSONBtn.setText(_translate("MainWindow", "ToJSON"))
        self.ValidateBtn.setText(_translate("MainWindow", "Validate"))
        self.BrowseBtn.setText(_translate("MainWindow", "Browse"))
        self.SaveBtn.setText(_translate("MainWindow", "Save"))
        self.label.setText(_translate(
            "MainWindow", "<html><head/><body><p><span style=\" font-size:16pt; color:#000000;\">Result</span></p></body></html>"))
        self.FollowersBtn.setText(_translate("MainWindow", "Followers"))
        self.AnalysisBtn.setText(_translate("MainWindow", "Analysis"))
        self.SearchBtn.setText(_translate("MainWindow", "Post Search"))

    def Browse(self):  # browse for files
        FileField = QFileDialog.getOpenFileName(
            None, "Browse For XML", ".", "XML files (*.xml)")  # Specify only XML files
        if(FileField[0] != ""):
            self.FileField.setText(FileField[0])
            self.Path = FileField  # Set the current path as the File location
            with open(FileField[0], encoding="Latin-1") as file:
                lines = file.readlines()
                self.MainTextField.setText(''.join(lines))

    def Restore(self):  # restore the opened file to it's original state
        if(self.Path != ""):
            with open(self.Path[0]) as file:
                content = file.read()
                self.ResultField.setText("")

    def MinifyXML(self):
        if(self.Path != ""):
            self.ResultField.setText(str(Minify(self.Path[0])))

    def PrettifyXML(self):
        if(self.Path != ""):
            ClearedSpaces = clearSpacing(self.Path[0])
            self.ResultField.setText(str(Prettifyfunction(ClearedSpaces)))

    def Save(self):
        filename = QFileDialog.getSaveFileName()
        if filename[0] != "":
            with open(filename[0], 'w') as file:
                Data = self.ResultField.toPlainText()
                file.write(Data)

    def toJson(self):
        if(self.Path != ""):
            self.ResultField.setText(str(Json(self.Path[0])))

    def validate(self):
        if(self.Path != ""):
            with open(self.Path[0]) as file:
                lines = file.readlines()
                linesl = lines[:]
                mistakes = mark_errors(lines)
                n = mistakes.__len__()
                mistakeslist = []
                mistakestype = []
                while(n != 0):
                    mistakeslist.append(mistakes[n-1].row+1)
                    mistakestype.append(mistakes[n-1].type)
                    n -= 1
                for i in range(len(mistakeslist)):
                    lines[mistakeslist[i]-1] = lines[mistakeslist[i]-1].rstrip()
                    lines[mistakeslist[i] -
                          1] = lines[mistakeslist[i]-1] + "xxxxxxxxx"
                    if mistakestype[i] == True:
                        lines[mistakeslist[i]-1] = lines[mistakeslist[i] -1] + " Absent Closed Tag" + "\n"
                    if mistakestype[i] == False:
                        lines[mistakeslist[i]-1] = lines[mistakeslist[i] -1] + " Absent Opened Tag" + "\n"
                self.MainTextField.setText(' '.join(lines))
                linesl = Correct_Errors(linesl)
                self.ResultField.setText(' '.join(linesl))

    def HuffmanEnc(self):
        if(self.Path != ""):
            with open(self.Path[0]) as file:
                content = file.read()
                global encoding
                global the_tree
                encoding, the_tree = HuffmanEncoding(content)
                compressedxml = bitarray(encoding)
                self.ResultField.setText(str(compressedxml))
                with open("compressedFile.xml", "wb") as compressedFile:
                    compressedxml.tofile(compressedFile)

    def HuffmanDec(self):
        if(self.Path != ""):
            decodedString = HuffmanDecoding(encoding, the_tree)
            self.ResultField.setText(decodedString)

    def Network(self):
        if(self.Path != ""):
            network(self.Path[0])

    def Analysis(self):
        if(self.Path != ""):
            id1, done1 = QInputDialog.getInt(
                self, 'Mutual', 'Input the First ID')
            id2, done2 = QInputDialog.getInt(
                self, 'Mutual', 'Input the Second ID')
            if id1 and id2:
                ourdict = users_dictionary(getlist(self.Path[0]))
                ourlist = getlist(self.Path[0])
                mostinf = most_influencer_user(ourdict)
                mostact = most_active_user(ourdict)
                suggested = suggestedFollowers(ourdict)
                mututal = mutual(id1, id2, ourdict)
                str1 = "The most active user is " + str(mostact)
                str2 = "The most influencer is " + str(mostinf)
                str3 = "Suggested followers for all users: " + str(suggested)
                str4 = "The mututal followers are " + str(mututal)
                alist = [str1, str2, str3, str4]
                final = '\n'.join(alist)
                self.ResultField.setText(final)

    def postSearch(self):
        if(self.Path != ""):
            topic, done2 = QInputDialog.getText(
                self, 'Search', 'Input your query')
            self.ResultField.setText(get_post(self.Path[0], str(topic)))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
